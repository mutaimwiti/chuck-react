{"version":3,"sources":["utils/api.ts","store/ActionTypes.ts","components/Joke.tsx","components/NavBar.tsx","components/Search.tsx","containers/pages/HomePage.tsx","store/actions/jokes.ts","store/actions/categories.ts","utils/helpers.ts","App.tsx","store/reducers/categories.ts","store/reducers/joke.ts","store/reducers/index.ts","store/middleware/httpMiddleware.ts","store/index.ts","reportWebVitals.ts","index.tsx"],"names":["api","categories","list","method","path","jokes","get","category","search","query","SEARCH_JOKES","FETCH_CATEGORIES","FETCH_JOKE","CLEAR_SEARCH_JOKES","StyledCard","styled","Card","Joke","joke","onLoadAnotherJoke","onSelectCategory","Body","Title","DropdownButton","data-testid","title","map","Dropdown","Item","onClick","event","currentTarget","blur","handleSelectCategory","Text","value","Button","variant","NavBar","onGoHome","Navbar","bg","Brand","href","Toggle","aria-controls","Search","results","onSearch","onClearSearch","items","isLoading","useState","setQuery","valid","setValid","Form","Group","Label","InputGroup","className","Control","type","onChange","target","length","debounce","debouncedSearch","placeholder","Append","muted","Alert","ListGroup","id","HomePage","history","useHistory","dispatch","useDispatch","useParams","useSelector","state","searchResults","loadJoke","useCallback","request","fetchJoke","useEffect","array","push","Math","floor","random","handleSelect","Container","Row","Col","searchJokes","App","basename","process","component","initialState","action","payload","searchInitialState","rootReducer","combineReducers","result","httpMiddleware","store","next","url","axios","then","response","data","catch","createStore","compose","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ded7cad9.chunk.js","sourcesContent":["export type RequestType = {\n  method: string;\n  path: string;\n};\n\nconst api = {\n  categories: {\n    list: (): RequestType => ({ method: 'get', path: 'categories' }),\n  },\n  jokes: {\n    get: (category: string): RequestType => ({\n      method: 'get',\n      path: `random?category=${category}`,\n    }),\n    search: (query: string): RequestType => ({\n      method: 'get',\n      path: `search?query=${query}`,\n    }),\n  },\n};\n\nexport default api;\n","export type Action = {\n  type: string;\n  payload?: any;\n  request?: any;\n};\n\nexport const SEARCH_JOKES = 'SEARCH_JOKES';\nexport const FETCH_CATEGORIES = 'FETCH_CATEGORIES';\nexport const FETCH_JOKE = 'FETCH_JOKE_BY_CATEGORY';\nexport const CLEAR_SEARCH_JOKES = 'CLEAR_SEARCH_JOKES';\n","import React, { MouseEvent } from 'react';\nimport styled from 'styled-components';\nimport { Button, Card, DropdownButton, Dropdown } from 'react-bootstrap';\n\nimport { JokeState } from '../store/reducers/joke';\nimport { CategoriesState } from '../store/reducers/categories';\n\nexport type JokeProps = {\n  category: string;\n  joke: JokeState;\n  onLoadAnotherJoke(): void;\n  categories: CategoriesState;\n  onSelectCategory(category: string): void;\n};\n\nconst StyledCard = styled(Card)`\n  border: none;\n`;\n\nconst Joke: React.FC<JokeProps> = ({\n  category,\n  joke,\n  onLoadAnotherJoke,\n  categories,\n  onSelectCategory,\n}) => {\n  const handleLoadAnotherJoke = (event: MouseEvent<HTMLButtonElement>) => {\n    event.currentTarget.blur();\n    onLoadAnotherJoke();\n  };\n\n  const handleSelectCategory = (\n    event: MouseEvent<HTMLButtonElement>,\n    category: string,\n  ) => {\n    event.currentTarget.blur();\n    onSelectCategory(category);\n  };\n\n  return (\n    <>\n      {joke && (\n        <StyledCard>\n          <Card.Body>\n            <Card.Title>\n              {category && (\n                <DropdownButton\n                  data-testid=\"category-dropdown\"\n                  title={category}\n                >\n                  {categories.map((category: string) => (\n                    <Dropdown.Item\n                      key={category}\n                      data-testid={`category-dropdown-item-${category}`}\n                      onClick={(event: MouseEvent<HTMLButtonElement>) => {\n                        handleSelectCategory(event, category);\n                      }}\n                    >\n                      {category}\n                    </Dropdown.Item>\n                  ))}\n                </DropdownButton>\n              )}\n            </Card.Title>\n            <Card.Text>{joke.value}</Card.Text>\n            <Button\n              variant=\"outline-secondary\"\n              onClick={handleLoadAnotherJoke}\n              data-testid=\"load-another-joke-button\"\n            >\n              Another <b>{category}</b> joke\n            </Button>\n          </Card.Body>\n        </StyledCard>\n      )}\n    </>\n  );\n};\n\nexport default Joke;\n","import React from 'react';\nimport { Navbar } from 'react-bootstrap';\n\nexport type NavBarProps = {\n  onGoHome(): void;\n};\n\nconst NavBar: React.FC<NavBarProps> = ({ onGoHome }) => {\n  return (\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand href=\"#\" onClick={() => onGoHome()}>\n        Chuck React\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import debounce from 'lodash.debounce';\nimport React, { ChangeEvent, useState, MouseEvent } from 'react';\nimport { Alert, Button, Form, InputGroup, ListGroup } from 'react-bootstrap';\n\nimport { JokeState, SearchState } from '../store/reducers/joke';\n\nexport type SearchProps = {\n  results: SearchState;\n  onSearch(phrase: string): void;\n  onClearSearch(): void;\n};\n\nconst Search: React.FC<SearchProps> = ({\n  results,\n  onSearch,\n  onClearSearch,\n}) => {\n  const { items, isLoading } = results;\n\n  const [query, setQuery] = useState('');\n  const [valid, setValid] = useState(false);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    setQuery(value);\n\n    // search phrase should be a minimum of 3 three characters\n    if (value.length >= 3) {\n      const debouncedSearch = debounce(() => onSearch(value), 300);\n      debouncedSearch();\n      setValid(true);\n    } else {\n      onClearSearch();\n      setValid(false);\n    }\n  };\n\n  const handleClear = (event: MouseEvent<HTMLButtonElement>) => {\n    event.currentTarget.blur();\n    setQuery('');\n    onClearSearch();\n    setValid(false);\n  };\n\n  return (\n    <>\n      <Form>\n        <Form.Group>\n          <Form.Label>\n            <b>Search more jokes</b>\n          </Form.Label>\n          <InputGroup className=\"mb-3\">\n            <Form.Control\n              type=\"text\"\n              value={query}\n              onChange={handleChange}\n              data-testid=\"search-input\"\n              placeholder=\"Enter your search phrase e.g. food\"\n            />\n            <InputGroup.Append>\n              <Button variant=\"outline-secondary\" onClick={handleClear}>\n                Clear\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n          {!valid && (\n            <Form.Text muted>\n              Your search phrase must be 3 characters or longer\n            </Form.Text>\n          )}\n        </Form.Group>\n      </Form>\n      <br />\n      {isLoading ? (\n        <Alert variant=\"info\">Loading jokes...</Alert>\n      ) : (\n        valid &&\n        !items.length && <Alert variant=\"warning\">No results to display</Alert>\n      )}\n      <ListGroup>\n        {items.map((joke: JokeState) => {\n          return <ListGroup.Item key={joke.id}>{joke.value}</ListGroup.Item>;\n        })}\n      </ListGroup>\n    </>\n  );\n};\n\nexport default Search;\n","import React, { useCallback, useEffect } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport {\n  fetchJoke,\n  searchJokes,\n  clearSearchJokes,\n} from '../../store/actions/jokes';\nimport Joke from '../../components/Joke';\nimport NavBar from '../../components/NavBar';\nimport Search from '../../components/Search';\nimport { State } from '../../store/reducers';\nimport { getRandomElement } from '../../utils/helpers';\nimport { fetchCategories } from '../../store/actions/categories';\nimport { CategoriesState } from '../../store/reducers/categories';\nimport { JokeState, SearchState } from '../../store/reducers/joke';\n\nconst HomePage = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { category }: any = useParams();\n  const joke = useSelector<State, JokeState>((state) => state.joke);\n  const categories = useSelector<State, CategoriesState>(\n    (state) => state.categories,\n  );\n  const searchResults = useSelector<State, SearchState>(\n    (state) => state.searchResults,\n  );\n\n  const loadJoke = useCallback(() => {\n    dispatch(fetchJoke(category));\n  }, [dispatch, category]);\n\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (category) {\n      loadJoke();\n    } else if (!category && categories.length) {\n      history.push(getRandomElement(categories));\n    }\n  }, [category, categories, history, dispatch, loadJoke]);\n\n  const handleSelect = (category: string) => history.push(`/${category}`);\n\n  const handleSearch = (query: string) => dispatch(searchJokes(query));\n\n  const handleClearSearch = () => dispatch(clearSearchJokes());\n\n  return (\n    <>\n      <NavBar onGoHome={() => handleSelect('')} />\n      <Container>\n        <Row>\n          <Joke\n            category={category}\n            joke={joke}\n            onLoadAnotherJoke={loadJoke}\n            categories={categories}\n            onSelectCategory={handleSelect}\n          />\n        </Row>\n        <Row>\n          <Col>\n            <Search\n              results={searchResults}\n              onSearch={handleSearch}\n              onClearSearch={handleClearSearch}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default HomePage;\n","import api from '../../utils/api';\nimport {\n  Action,\n  FETCH_JOKE,\n  SEARCH_JOKES,\n  CLEAR_SEARCH_JOKES,\n} from '../ActionTypes';\n\nexport const fetchJoke = (category: string): Action => ({\n  type: FETCH_JOKE,\n  request: api.jokes.get(category),\n});\n\nexport const searchJokes = (query: string): Action => ({\n  type: SEARCH_JOKES,\n  request: api.jokes.search(query),\n});\n\nexport const clearSearchJokes = (): Action => ({\n  type: CLEAR_SEARCH_JOKES,\n});\n","import api from '../../utils/api';\nimport { Action, FETCH_CATEGORIES } from '../ActionTypes';\n\nexport const fetchCategories = (): Action => ({\n  type: FETCH_CATEGORIES,\n  request: api.categories.list(),\n});\n","export const getRandomElement = (array: any[]) => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n","// eslint-disable-next-line no-use-before-define\nimport React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport HomePage from './containers/pages/HomePage';\n\nconst App = () => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/:category?\" component={HomePage} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { Action, FETCH_CATEGORIES } from '../ActionTypes';\n\nexport type CategoriesState = string[];\n\nexport const initialState: CategoriesState = [];\n\nconst categories = (state: CategoriesState = initialState, action: Action) => {\n  switch (action.type) {\n    case `${FETCH_CATEGORIES}_SUCCESS`: {\n      return action.payload;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default categories;\n","import {\n  Action,\n  FETCH_JOKE,\n  SEARCH_JOKES,\n  CLEAR_SEARCH_JOKES,\n} from '../ActionTypes';\n\nexport type JokeState = {\n  // eslint-disable-next-line camelcase\n  icon_url: string;\n  id: string;\n  url: string;\n  value: string;\n};\n\nexport type SearchState = { items: JokeState[]; isLoading: boolean };\n\nexport const jokeInitialState = null;\n\nexport const joke = (\n  state: JokeState | null = jokeInitialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case `${FETCH_JOKE}_SUCCESS`: {\n      return action.payload;\n    }\n    default:\n      return state;\n  }\n};\n\nexport const searchInitialState = { items: [], isLoading: false };\n\nexport const searchResults = (\n  state: SearchState = searchInitialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case `${SEARCH_JOKES}_SUCCESS`: {\n      return { items: action.payload.result, isLoading: false };\n    }\n    case `${SEARCH_JOKES}_REQUESTING`: {\n      return { ...state, isLoading: true };\n    }\n    case CLEAR_SEARCH_JOKES: {\n      return searchInitialState;\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport categories, { CategoriesState } from './categories';\nimport { joke, searchResults, JokeState, SearchState } from './joke';\n\nexport interface State {\n  joke: JokeState;\n  searchResults: SearchState;\n  categories: CategoriesState;\n}\n\nconst rootReducer = combineReducers({\n  joke,\n  categories,\n  searchResults,\n});\n\nexport default rootReducer;\n","import axios from 'axios';\nimport { Action } from '../ActionTypes';\nimport { RequestType } from '../../utils/api';\n\nexport const baseUrl = 'https://api.chucknorris.io/jokes';\n\nconst httpMiddleware = (store: any) => (next: any) => (action: Action) => {\n  if (action.request) {\n    const { method, path }: RequestType = action.request;\n\n    const url = `${baseUrl}/${path}`;\n\n    store.dispatch({\n      type: `${action.type}_REQUESTING`,\n    });\n\n    (axios as any)\n      [method](url)\n      .then((response: { data: any }) => {\n        store.dispatch({\n          type: `${action.type}_SUCCESS`,\n          payload: response.data,\n        });\n      })\n      .catch(() => {\n        store.dispatch({\n          type: `${action.type}_FAILURE`,\n        });\n      });\n  } else {\n    return next(action);\n  }\n};\n\nexport default httpMiddleware;\n","import thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, compose } from 'redux';\n\nimport rootReducer from './reducers';\nimport httpMiddleware from './middleware/httpMiddleware';\n\nexport const store = createStore(\n  rootReducer,\n  {},\n  compose(applyMiddleware(thunk, httpMiddleware)),\n);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport { store } from './store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}